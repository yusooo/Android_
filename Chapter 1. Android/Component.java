/*
    1.  컴포넌트 Component
        앱의 구성 단위 => 여러 개의 컴포넌트 조합으로 애플리케이션 완성
        클래스 하나 = 컴포넌트 ( 단. 모든 클래스가 컴포넌트는 아님)
            클래스
                컴포넌트
                    생명 주기를 개발자 코드로 관리 X, 시스템에서 생성 및 관리하다가 소멸
                    컴포넌트 클래스는 독립적 수행 단위로 동작작
                        개발자 코드로 직접 결합 -> 실행 ( X )
                        인텐트Intent를 매개로 하여 결합 X 상태에서 독립적으로 실행하는 구조
                        => A 컴포넌트 : B 컴포넌트 실행을 시스템에 의뢰, 시스템에서 B 컴포넌트 실행 => 직접 결합 발생 X
                    Main 함수같은 애플리케이션의 진입 지점이 따로 X ( 사용자의 실행 없이도 앱 구동 가능 )
                    애플리케이션 라이브러리 개념 존재 ( 외부 앱과 연동 <= 외부 앱의 컴포넌트 실행 가능 )

                일반 클래스
                    필요 시 new 연산자로 생성 => 이용
                    필요 x -> null 대입 => 소멸
*/

/*
    정리
        1.  안드로이드 = 컴포넌트 기반 개발
        2. 각각의 컴포넌트는 개발자 코드 간의 결합 발생 X
        3. 컴포넌트의 생명주기는 시스템이 관리 <= 앱 수행 시점이 다양할 수 있음
        4. 애플리케이션 라이브러리 개념의 생성

    컴포넌트의 종류
        액티비티 Activity : UI 구성을 위한 컴포넌트 ( 가장 많이 작성 )
        서비스 Service : UI  없이 백그라운드에서 장시간 수행되는 컴포넌트
        콘텐츠 프로바이더 ContentProvider : 애플리케이션 간 데이터를 공유하기 위한 컴포넌트 ( 앱 간의 데이터 공유를 목적으로 사용하는 컴포넌트 )
        브로드캐스트 리시버 BrodcastReceiver : 이벤트 모델로 수행되는 컴포넌트 ( 이벤트 발생 시 이벤트를 받기 위해 작성하는 컴포넌트 )
*/